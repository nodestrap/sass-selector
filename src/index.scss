@use "~@nodestrap/sass-string/src/index" as string;
@use "sass:list" as list;



@function wrap-each($selector, $wrap-start, $wrap-end) {
    $bracket: 0;
    $has-comma: true;
    $index: 1;
    $sel-start: null;
    $sel-end: null;
    
    $char: string.slice($selector, string.length($selector));
    $add-terminator: false;
    @if (($char != ",") and ($char != " ")) {
        $selector: $selector + " ";
        $add-terminator: true;
    }

    $wrap-length: string.length($wrap-start) + string.length($wrap-end);

    @while ($index <= string.length($selector)) {
        $char: string.slice($selector, $index, $index);
        
        @if (($char == ",") or ($char == " ")) {
            @if (($bracket == 0) and ($sel-end != null)) {
                $selector:
                    string.slice($selector, 1, $sel-start - 1)
                    +
                    $wrap-start
                    +
                    string.slice($selector, $sel-start, $sel-end)
                    +
                    $wrap-end
                    +
                    string.slice($selector, $sel-end + 1)
                    ;
                
                $sel-start: null;
                $sel-end: null;
                $index: $index + $wrap-length;
            }
        }
        @else {
            @if (($char == "(") or ($char == "{") or ($char == "[")) {
                $bracket: $bracket + 1;
            }
            @else if (($char == ")") or ($char == "}") or ($char == "]")) {
                $bracket: $bracket - 1;

                @if ($bracket == 0) { $sel-end: $index; }
            }
            @else if ($bracket == 0) {
                @if ($sel-start == null) { $sel-start: $index; }
                $sel-end: $index;
            }
        }

        $index: $index + 1;
    }

    @if ($add-terminator) { @return string.slice($selector, 1, -2); }
    @return $selector;
}

@function parse-each($selector) {
    $bracket: 0;
    $has-comma: true;
    $sel-start: null;
    $sel-end: null;

    $results: ();

    $selector: $selector + " ";
    @for $index from 1 through string.length($selector) {
        $char: string.slice($selector, $index, $index);
        
        @if (($char == ",") or ($char == " ")) {
            @if (($bracket == 0) and ($sel-end != null)) {
                $result: string.slice($selector, $sel-start, $sel-end);

                @if (list.index($results, $result) == null) {
                    $results: list.append($results, $result);
                }
                
                $sel-start: null;
                $sel-end: null;
            }
        }
        @else {
            @if (($char == "(") or ($char == "{") or ($char == "[")) {
                $bracket: $bracket + 1;
            }
            @else if (($char == ")") or ($char == "}") or ($char == "]")) {
                $bracket: $bracket - 1;

                @if ($bracket == 0) { $sel-end: $index; }
            }
            @else if ($bracket == 0) {
                @if ($sel-start == null) { $sel-start: $index; }
                $sel-end: $index;
            }
        }
    }

    @return $results;
}

@function make-append($selector) {
    $wrap-start: "&";
    $wrap-end: "";

    @return wrap-each($selector, $wrap-start, $wrap-end);
}



@mixin is($selector) {
    @if (string.not-empty($selector)) { #{$selector} {
        @content;
    }}
    @else {
        @content;
    }
}

@mixin not($selector) {
    $sel-not: "";
    @each $item in parse-each($selector) {
        $sel-not: $sel-not + ":not(#{$item})";
    }

    @include is($sel-not) {
        @content;
    }
}



@mixin append($selector) {
    @include is(make-append($selector)) {
        @content;
    }
}

@mixin append-not($selector) {
    $sel-not: "";
    @each $item in parse-each($selector) {
        $sel-not: $sel-not + ":not(#{$item})";
    }

    @include append($sel-not) {
        @content;
    }
}



@mixin unify($selector) {
    $sel-comb: "";
    @each $item in parse-each($selector) {
        @if (list.index(("." ":"), string.slice($item, 1, 1)) != null) {
            $sel-comb: $sel-comb + $item;
        }
    }


    @if (string.not-empty(#{&})) {
        @include append($sel-comb) {
            @content;
        }
    }
    @else {
        @include is($selector) {
            @content;
        }
    }
}



@mixin nested-self($parentheses: false) {
    @at-root { @each $item in parse-each(&) {
            @include is($item) {
                @if ($parentheses) { > { @include is($item) {
                    @content;
                }}}
                @else { @include is($item) {
                    @content;
                }}
            }
    }}
}